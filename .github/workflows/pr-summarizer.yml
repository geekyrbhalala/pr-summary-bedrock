name: PR Summarizer

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
    summarize-pr:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
                
            - name: Setup Python
              uses: actions/setup-python@v4
              with:
                python-version: '3.x'

            - name: Gather PR data
              id: prdata
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                    const pr = await github.rest.pulls.get({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: context.payload.pull_request.number
                    });

                    // Get commits
                    const commits = await github.rest.pulls.listCommits({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: context.payload.pull_request.number
                    });

                    // Get PR diff (raw) - using mediaType to accept diff
                    const diffResponse = await github.request('GET /repos/{owner}/{repo}/pulls/{pull_number}', {
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: context.payload.pull_request.number,
                      headers: { accept: "application/vnd.github.v3.diff" }
                    });

                    // Build payload (truncate diff if huge)
                    const diff = diffResponse.length > 25000 ? diffResponse.data.slice(0,25000) + "\n\n[TRUNCATED]" : diffResponse.data;

                    return {
                      number: context.payload.pull_request.number,
                      title: pr.data.title,
                      body: pr.data.body || "",
                      author: pr.data.user.login,
                      head_ref: pr.data.head.ref,
                      base_ref: pr.data.base.ref,
                      commits: commits.data.map(c => ({sha: c.sha, message: c.commit.message, author: c.commit.author?.name || c.author?.login})),
                      diff: diff
                    };

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@main
              with:
                role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
                aws-region: us-east-1

            - name: Write PR payload to file
              run: printf '%s' "${{ steps.prdata.outputs.result }}" > /tmp/pr_payload.json
            
            - name: Invoke Lambda (sync) with PR payload
              id: invoke
              run: |
                aws lambda invoke \
                  --function-name ${{ secrets.AWS_LAMBDA_FUNCTION_ARN }} \
                  --payload fileb:///tmp/pr_payload.json /tmp/lambda_response.json
            # - name: Parse Lambda response
            #   id: parse
            #   run: |
            #     # Lambda returns JSON payload in file
            #     jq -r '.body' /tmp/lambda_response.json > /tmp/lambda_body.json || true
            #     # If the lambda response is wrapped differently, try reading the file
            #     if [ ! -s /tmp/lambda_body.json ]; then
            #         cat /tmp/lambda_response.json > /tmp/lambda_body.json
            #     fi
            #     echo "body<<EOF" >> $GITHUB_OUTPUT
            #     cat /tmp/lambda_body.json >> $GITHUB_OUTPUT
            #     echo "EOF" >> $GITHUB_OUTPUT

            # - name: Post comment on PR
              # uses: actions/github-script@v7
              # with:
              #   github-token: ${{ secrets.GITHUB_TOKEN }}
              #   script: |
              #       const body = `### ðŸ¤– AI PR Summary\n\n${` + "`${" + `inputs.body` + "}`" + `}\n`;
              #       // If the action output contains JSON, parse it
              #       let parsed;
              #       try {
              #           parsed = JSON.parse(`$${'{'}{ steps.parse.outputs.body }}`);
              #       } catch (e) {
              #           parsed = { summary: `$${'{'}{ steps.parse.outputs.body }}` };
              #       }
              #       const comment = `### ðŸ¤– AI PR Summary\n\n**Summary:**\n${parsed.summary || parsed}\n\n**Risks / Improvements:**\n${(parsed.risks || []).map((r,i)=>`${i+1}. ${r}`).join("\n")}\n\n*Generated by AI â€” review and verify recommendations.*`;

              #       await github.rest.issues.createComment({
              #           owner: context.repo.owner,
              #           repo: context.repo.repo,
              #           issue_number: context.payload.pull_request.number,
              #           body: comment
              #       });